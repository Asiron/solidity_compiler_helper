#!/usr/bin/env ruby

require 'json'
require 'optparse'

def library_code
  'function create(abiDefinition) {  return web3.eth.contract(abiDefinition);}/*function deploy(account, value, gas, contract, code, input) */function deploy() {  var account = arguments[0];  var value = arguments[1];  var gas = arguments[2];  var contract = arguments[3];  var code = arguments[4];  var codeString = "contract.new(inputMarker,{from:\'accountMarker\', value: valueMarker,  data: \'codeMarker\', gas: gasMarker}, function (e, contract) {    if(!e) {      if(!contract.address) {        console.log(\"Contract transaction send: TransactionHash: \" + contract.transactionHash + \" waiting to be mined...\");      } else {        console.log(\"Contract mined! Address: \" + contract.address);      }    } else {      console.log(e)    }  })";  codeString = codeString.replace("accountMarker", account);  codeString = codeString.replace("valueMarker", value);  codeString = codeString.replace("codeMarker", code);  codeString = codeString.replace("gasMarker", gas);  input = "\"null\"";  if (arguments.length > 5) {    if (arguments[5] != null) {      var args = [];      for (var i = 5;i < arguments.length; i++) {        var val = arguments[i];        if (typeof(val) === \'string\') {          val = "\"" + val + "\"";        }        args.push(val);      }      input = args.join(",");    }  }  codeString = codeString.replace("inputMarker", input);  console.log("Construction args are: " + input);  var instance = eval(codeString);  return instance;}function watcher(error, result) {  if (!error) {    console.log("Result");    console.log(JSON.stringify(result));    return;  }  console.log("Error" + error);}/*function call(account, gas, func, input) */function call() {  var account = "eth.accounts["+arguments[0]+"]";  var gas = arguments[1];  var func = arguments[2];  input = "null";  if (arguments.length > 3) {    if (arguments[3] != null) {      var args = Array.prototype.slice.call(arguments, 3);      input = args.join(",");    }  }  codeString = "func.sendTransaction(inputMarker, gasMarker, {from:accountMarker}, watcher);";  codeString = codeString.replace("accountMarker",account);  codeString = codeString.replace("gasMarker",gas);  codeString = codeString.replace("inputMarker",input);  eval(codeString);}function send(from_index, to, value, gas){ return eth.sendTransaction({from:eth.accounts[from_index], to:to, value:web3.toWei(value,\'ether\'), gas:gas});}function bal() {  for (var i = 0; i < eth.accounts.length; i++) {    account = eth.accounts[i];    balance = web3.fromWei(eth.getBalance(eth.accounts[i]), \'ether\');    console.log("Index : " + i);    console.log("Account : "+ account);    console.log("Balance : "+ balance);    console.log("\n");  }}'
end


def compile_solidity(file)
  json_string = `solc --add-std --optimize --combined-json abi,bin,userdoc,devdoc #{file}`
  json_string = json_string.gsub("\\n","")
  begin
    json_object = JSON.parse(json_string)
    throw if json_object.nil?
    puts `solc --optimize --gas #{file}`
    puts "\n\n"
    puts "-------------------------------------"
    json_object["contracts"]
  rescue
    puts "Failed to Compile."
    abort
  end
end

def deploy_contract(code)
end

def process_code(contracts)
  contracts.keys.each.with_index do |key, i|
    contracts[key]["bin"] = "0x" + contracts[key]["bin"]
    contracts[key]["abi"] = JSON.parse(contracts[key]["abi"])
    contracts[key]["devdoc"] = JSON.parse(contracts[key]["devdoc"])
    contracts[key]["userdoc"] = JSON.parse(contracts[key]["userdoc"])
  end
  return contracts
end

def javascript_file_name(file_name, output)
  return output unless output.nil?
  
  extn = File.extname  file_name
  name = File.basename file_name, extn
  name + '_compiled.js'
end

options = {}
OptionParser.new do |parser|

  parser.accept(Integer) do |i|
    raise "Only positive integers allowed" unless i.to_i >= 0
    i.to_i
  end

  parser.banner = "Usage: solc_helper [options]"

  parser.on("-c", "--contract CONTRACT", String, "Name of the contract to be prepared for deployment") do |contract|
    options[:contract] = contract
  end

  parser.on("-g", "--gas GAS", Integer, "Gas estimation of contract deployment") do |gas|
    options[:gas] = gas
  end

  parser.on("--args ARGS", "Arguments for contract construction if any") do |args|
    options[:args] = args
  end

  parser.on("-v", "--value VALUE", Integer, "Ether value for deployment") do |value|
    options[:value] = value
  end

  parser.on("-o", "--output FILENAME", String, "Path to the output result file") do |filename|
    options[:output] = filename
  end

end.parse!

raise OptionParser::MissingArgument if options[:gas].nil?
raise OptionParser::MissingArgument if options[:value].nil?
raise OptionParser::MissingArgument if options[:contract].nil?
options[:args] = options[:args] || "null"

file_name = ARGV.pop
raise "Need to specify a file with contract's source code in Solidty " unless file_name

compiled_object = compile_solidity(file_name)
compiled_object = process_code(compiled_object)
javascript_file_name = javascript_file_name(file_name, options[:output])

puts javascript_file_name

current_contract = options[:contract]

compiled_variable_name = "#{current_contract}Compiled"
contract_variable_name = "#{current_contract}Contract"
contract_instance_variable_name = "#{current_contract}"

gas   = options[:gas]
value = options[:value]
input = options[:args]

File.open(javascript_file_name, 'w') do |f|
  f.write("#{library_code};\nvar #{compiled_variable_name} = #{compiled_object.to_json};")
  f.write("#{contract_variable_name} = create(#{compiled_variable_name}.#{current_contract}.abi);")
  f.write("#{contract_instance_variable_name} = deploy(eth.coinbase,#{value},#{gas},#{contract_variable_name},#{compiled_variable_name}.#{current_contract}.bin,#{input});")
  f.write("console.log('Compiled Object : #{compiled_variable_name}');")
  f.write("console.log('Contract : #{contract_variable_name}');")
  f.write("console.log('Contract Instance : #{contract_instance_variable_name}');")
end

puts "loadScript('#{`pwd`}/#{javascript_file_name}')".gsub("\n",'')
